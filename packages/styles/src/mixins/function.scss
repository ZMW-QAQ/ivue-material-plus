@use 'config';

// 获取 css var
// getCssVar(组件名称, 样式名称) => var(--ivue-组件名称-样式名称)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// 加入变量名称
// joinVarName((组件名称, 样式名称)) => '--ivue-组件名称-样式名称'
@function joinVarName($list) {
  $name: '-';

  @each $item in $list {
    // 有参数
    @if $item != '' {
      $name: '#{$name}-#{$item}';
    }
  }

  @return $name;
}

// 获取 css var 名称
// getCssVarName(组件名称, 'text-color') => '--el-button-text-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}

// 判断父级选择器，是否包含`--` `.is-`  `：`这三种字符
@function hitAllSpecialNestRule($selector) {
  // 包含修饰符
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

// 判断父级选择器是否包含'--'
@function containsModifier($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, config.$modifier-separator) {
    // str-index 返回字符串的第一个索引
    @return true;
  } @else {
    @return false;
  }
}

// 判断父级选择器是否包含'.is-'
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

// 判断父级是否包含 ':' （用于判断伪类和伪元素）
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}

// BEM 支持函数
// 该函数将选择器转化为字符串，并截取指定位置的字符
@function selectorToString($selector) {
  // inspect(...) 表达式中的内容如果是正常会返回对应的内容，如果发生错误则会弹出一个错误提示
  // 返回 $value 的字符串表示形式
  $selector: inspect($selector);
  // 返回从索引 $start-at 开始到索引 $end-at（包括两者）结束的 $string
  $selector: str-slice($selector, 2, -2);

  @return $selector;
}
