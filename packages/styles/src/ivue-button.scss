// @import "ivue-loading.scss";
@use 'base.scss' as *;
@use 'mixins/mixins' as *;
@use 'common/var.scss' as *;
@use 'common/transition.scss' as *;

@use 'elevation/mixins.scss' as *;
@use 'ivue-ripple.scss' as *;
@use 'ivue-loading.scss' as *;

$name: 'ivue-button';

@include b(#{$name}-clean) {
  margin: 0;
  padding: 0;
  display: inline-block;
  position: relative;
  outline: none;
  background: transparent;
  border: 0;
  border-radius: 0;
  transition: $transition-default, color 1ms;
  font-family: inherit;
  line-height: normal;
  text-decoration: none;
  vertical-align: top;
  white-space: nowrap;
}

.isMobile {
  &:before {
    opacity: 0 !important;
  }
}

@include b($name) {
  // 设置组件 css var 变量
  @include set-component-css-var($name, $button);

  @extend .#{$name}-clean;

  text-align: center;
  user-select: none;
  font-weight: 500;
  color: currentColor;
  cursor: pointer;

  min-width: getCssVar($name, 'min-width');
  height: getCssVar($name, 'height');
  border-radius: getCssVar($name, 'radius');
  font-size: getCssVar('ivue-font-size-base');
  padding: getCssVar($name, 'padding');

  &:active {
    outline: none;
  }

  &::-moz-focus-inner {
    padding: 0;
    border: 0;
  }

  &:before {
    content: ' ';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    opacity: 0;
    border-radius: inherit;
    transition: $transition-default;
    will-change: background-color, opacity;
  }

  &[disabled] {
    pointer-events: none;

    color: getCssVar($name, 'disabled-color');
  }

  @media screen and (min-width: 800px) {
    &:not([disabled]) {
      cursor: pointer;
      -webkit-tap-highlight-color: transparent;

      &:hover,
      &:active {
        &:before {
          background-color: currentColor;
          opacity: 0.12;
        }
      }

      &:active {
        &:before {
          opacity: 0.2;
        }
      }
    }
  }

  @media screen and (max-width: 800px) {
    &:not([disabled]) {
      &:hover {
        &:before {
          background-color: transparent;
          opacity: 0.12;
        }
      }
    }
  }

  &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
    will-change: box-shadow;

    // elevation
    @include ivue-elevation(2);

    &:not(.is-mask):active {
      // elevation
      @include ivue-elevation(8);
    }
  }

  &.is-raised[disabled] {
    background-color: getCssVar($name, 'raised-disabled-bg');
    color: getCssVar($name, 'disabled-color');
  }

  // 选中
  &.is-selected {
    background: currentColor;

    color: getCssVar('ivue-color-white') !important;
  }

  // 当前选中
  &.is-current {
    border: 1px solid;
    border-color: currentColor !important;
  }

  // 轮廓
  &.is-outline {
    border: 1px solid currentColor;
    background: transparent !important;
    box-shadow: none;

    .ivue-button-content {
      color: currentColor;
    }
  }

  // 只读
  &.is-readonly {
    border-color: transparent !important;
    background-color: getCssVar($name, 'readonly-color') !important;
  }

  // 圆角
  &.is-radius {
    border-radius: getCssVar($name, 'radius-border');
  }

  // 蒙版
  &.is-mask {
    &::before {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 30;
      opacity: 1 !important;
      pointer-events: none;
      background: getCssVar($name, 'mask-bg') !important;
    }
  }

  // icon
  &.is-icon {
    width: getCssVar($name, 'icon-size');
    min-width: getCssVar($name, 'icon-size');
    height: getCssVar($name, 'icon-size');
    margin: 0 6px;
    border-radius: 50%;
    padding: 0;

    &::before {
      border-radius: 50%;
    }

    // ripple
    .ivue-ripple {
      border-radius: 50%;
    }

    .ivue-ripple-enter-active {
      transition-duration: 1.2s;
    }

    .ivue-ripple-wave {
      top: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      left: 0 !important;
    }

    // icon
    .ivue-icon {
      font-size: getCssVar($name, 'font-size');
    }
  }

  // primary
  &.is-primary {
    background: getCssVar($name, 'primary');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'primary');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'primary-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'primary-shadow-2'),
          getCssVar($name, 'primary-shadow-14'),
          getCssVar($name, 'primary-shadow-12')
        );
      }
    }
  }

  // light-primary
  &.is-light-primary {
    background: getCssVar($name, 'light-primary');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'light-primary-color');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'light-primary-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'light-primary-shadow-2'),
          getCssVar($name, 'light-primary-shadow-14'),
          getCssVar($name, 'light-primary-shadow-12')
        );
      }
    }
  }

  // dark-primary
  &.is-dark-primary {
    background: getCssVar($name, 'dark-primary');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'dark-primary-color');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'dark-primary-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'dark-primary-shadow-2'),
          getCssVar($name, 'dark-primary-shadow-14'),
          getCssVar($name, 'dark-primary-shadow-12')
        );
      }
    }
  }

  // success
  &.is-success {
    background: getCssVar($name, 'success');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'success-color');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'success-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'success-shadow-2'),
          getCssVar($name, 'success-shadow-14'),
          getCssVar($name, 'success-shadow-12')
        );
      }
    }
  }

  // warning
  &.is-warning {
    background: getCssVar($name, 'warning');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'warning-color');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'warning-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'warning-shadow-2'),
          getCssVar($name, 'warning-shadow-14'),
          getCssVar($name, 'warning-shadow-12')
        );
      }
    }
  }

  // error
  &.is-error {
    background: getCssVar($name, 'error');
    color: getCssVar($name, 'white');

    // color
    &-color {
      color: getCssVar($name, 'error-color');
    }

    &.is-raised:not(.is-depressed):not(.is-flat):not([disabled]) {
      box-shadow: 0 10px 10px -5px getCssVar($name, 'error-shadow-2');

      &:not(.is-mask):active {
        @include ivue-elevation(
          8,
          getCssVar($name, 'error-shadow-2'),
          getCssVar($name, 'error-shadow-14'),
          getCssVar($name, 'error-shadow-12')
        );
      }
    }
  }
}

// 涟漪
@include b(#{$name}-ripple) {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 10;
  overflow: hidden;
  box-sizing: border-box;

  // 内容
  @include e('content') {
    position: relative;
    z-index: 2;
    color: currentColor;
    display: flex;
    align-items: center;
    line-height: 1;
  }
}

// loading
@include b(#{$name}-loading) {
  position: relative;

  margin-right: getCssVar($name, 'loading-margin-right');

  @include e(content) {
    position: relative;

    width: getCssVar($name, 'loading-size');
    height: getCssVar($name, 'loading-size');
  }

  .ivue-loading-mask {
    background: none;
  }

  .ivue-loading-spinner {
    color: getCssVar($name, 'loading-color');

    .circular {
      width: 100%;
      height: 100%;
    }
  }
}
