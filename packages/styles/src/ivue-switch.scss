@use 'sass:math';

@use 'base.scss' as *;
@use 'mixins/mixins' as *;
@use 'common/var.scss' as *;
@use 'common/transition.scss' as *;

$name: 'ivue-switch';

:root {
  // color
  --#{$name}-bg: #858585;

  // emboss
  --#{$name}-disabled-emboss-thumb-color: #fafafa;
  --#{$name}-disabled-emboss-track-color: rgba(0, 0, 0, 0.12);
  --#{$name}-disabled-emboss-track-checked-color: rgba(0, 0, 0, 0.38);

  // disabled
  --#{$name}-disabled-bg: #f8f9fd;
}

$default-width: 44px;
$default-after-width: 18px;

$emboss-default-width: 38px;
$emboss-default-height: 22px;
$emboss-large-width: 60px;
$emboss-large-height: 28px;
$emboss-small-width: 28px;
$emboss-small-height: 16px;
$emboss-margin: 7px;

@mixin transition() {
  transition: left 0.2s ease-in-out, width 0.2s ease-in-out;
}

@include b($name) {
  // 设置组件 css var 变量
  @include set-component-css-var($name, $switch);

  position: relative;
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  outline: none;
  transition: all 0.2s ease-in-out 0s;
  -webkit-tap-highlight-color: transparent;

  width: getCssVar($name, 'width');
  height: getCssVar($name, 'height');
  border-radius: getCssVar($name, 'height');
  border: 1px solid getCssVar($name, 'bg');
  background: getCssVar($name, 'bg');

  // focus
  &:focus {
    outline: 0;

    // hover
    &:hover {
      box-shadow: none;
    }
  }

  // after
  &::after {
    content: '';
    position: absolute;
    top: 1px;
    left: 1px;
    cursor: pointer;

    width: getCssVar($name, 'after-size');
    height: getCssVar($name, 'after-size');
    border-radius: getCssVar($name, 'after-size');
    background: getCssVar($name, 'after-bg');

    @include transition;
  }

  &:active:not(.ivue-switch-disabled) {
    &::after {
      width: calc(getCssVar($name, 'after-size') + 8px);
    }
  }

  &::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    display: none;
    width: calc(getCssVar($name, 'after-size') - 2px);
    height: calc(getCssVar($name, 'after-size') - 2px);
    border-radius: 50%;
    background-color: transparent;
    z-index: 1;
    border: 1px solid currentColor;
    border-color: transparent transparent transparent currentColor;
    animation: switch-loading 1s linear;
    animation-iteration-count: infinite;
  }

  // input
  @include e(input) {
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
    margin: 0;
  }

  // 未激活
  &.is-false {
    border-color: currentColor;
    background: currentColor;
  }

  // 激活
  &.is-checked {
    border-color: currentColor;
    background: currentColor;

    &::after {
      left: getCssVar($name, 'checked-after-left');
    }

    &::before {
      left: getCssVar($name, 'checked-before-left');
    }

    &:active:not(.ivue-switch-disabled)::after {
      left: calc(
        math.div(getCssVar($name, 'width'), 2) -
          math.div(getCssVar($name, 'after-size'), 2) + 2px
      );
    }

    @include e(inner) {
      left: getCssVar($name, 'checked-inner-left');
    }
  }

  // 内部文字样式
  @include e(inner) {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 23px;
    display: flex;
    align-items: center;
    color: getCssVar($name, 'inner-color');
    font-size: getCssVar('ivue-font-size-small');

    i {
      position: relative;
      min-width: auto;
      width: 12px;
      height: 12px;
      text-align: center;
    }
  }

  // 禁用
  &.is-disabled {
    cursor: not-allowed;
    border-color: getCssVar($name, 'disabled-border-color') !important;
    background-color: getCssVar($name, 'disabled-bg') !important;

    &:after {
      background: getCssVar($name, 'disabled-border-color');
      cursor: not-allowed;
    }

    @include e(inner) {
      color: getCssVar($name, 'disabled-border-color');
    }
  }

  // loading
  &.is-loading {
    opacity: 0.6;

    &::before {
      display: block;
    }

    &.is-checked {
      &:active:not(.is-disabled)::after {
        left: calc(math.div(getCssVar($name, 'width'), 2) + 1px);
      }
    }

    &:active:not(.is-disabled)::after {
      width: getCssVar($name, 'after-size');
    }

    // 大型
    &.is-large {
      &.is-checked::after {
        left: 35px !important;
      }

      &:active:not(.is-disabled)::after {
        width: 18px;
      }
    }

    // 小型
    &.is-small {
      &.is-checked {
        &:active:not(.is-disabled)::after {
          width: 12px !important;
          left: 13px !important;
        }
      }

      &:active:not(.is-disabled)::after {
        width: 12px !important;
      }
    }
  }

  // 小
  &.is-small {
    width: 28px;
    height: 16px;
    line-height: 14px;

    &::after {
      width: 12px;
      height: 12px;
      border-radius: 12px;
    }

    &:active:not(.is-disabled) {
      &.is-checked::after {
        left: 11px;
      }

      &::after {
        width: 14px;
      }
    }

    &::before {
      width: 10px;
      height: 10px;
    }

    &.is-checked::after {
      left: 13px;
    }

    &.is-checked::before {
      left: 14px;
      width: 10px;
      height: 10px;
    }
  }

  // 大
  &.is-large {
    width: 56px;

    &.is-checked:active:not(.is-disabled) {
      &:after {
        left: 23px;
      }
    }

    &:active:not(.is-disabled)::after {
      width: 30px;
    }

    &.is-checked::after {
      left: 35px;
    }

    &.is-checked::before {
      left: 36px;
    }
  }
}

@include b(#{$name}-emboss) {
  // 设置组件 css var 变量
  @include set-component-css-var($name, $switch);

  position: relative;
  display: inline-flex;
  align-items: center;
  vertical-align: middle;
  user-select: none;
  outline: none;
  cursor: pointer;

  @include e(inner) {
    position: relative;
    margin-left: 8px;
    left: 0;
    color: getCssVar($name, 'emboss-inner-color');
  }

  // 扁平化
  @include e(content) {
    position: relative;
    display: inline-flex;
    width: getCssVar($name, 'emboss-default-width');
    height: getCssVar($name, 'emboss-default-height');
    flex: 0 0 auto;

    // 跟踪
    @include e(track) {
      position: absolute;
      left: 1px;
      right: 2px;
      top: calc(50% - 5.5px);
      border-radius: 8px;
      opacity: 0.6;
      background-color: currentColor;
      transition: all $transition-default;
      transition-property: color, background-color;

      width: calc(getCssVar($name, 'emboss-default-width') - 2px);
      height: calc(math.div(getCssVar($name, 'emboss-default-height'), 2));
      color: getCssVar($name, 'bg');

      // 激活
      &.is-checked {
        color: currentColor;
      }
    }

    // 指示器
    @include e(thumb) {
      position: relative;
      border-radius: 50%;
      box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),
        0px 4px 5px 0px rgba(0, 0, 0, 0.14),
        0px 1px 10px 0px rgba(0, 0, 0, 0.12);
      pointer-events: none;
      background-color: currentColor;
      transition: all $transition-default;
      transition-property: color, transform;

      width: getCssVar($name, 'emboss-default-height');
      height: getCssVar($name, 'emboss-default-height');
      color: getCssVar($name, 'thumb-color');

      // 激活
      &.is-checked {
        color: currentColor;
        transform: translate(
          calc(
            getCssVar($name, 'emboss-default-height') -
              (math.div(getCssVar($name, 'emboss-default-height'), 4))
          ),
          0
        );
      }
    }

    // 禁用
    &.is-disabled {
      cursor: var(--ivue-cursor-disabled);

      .#{$name}-emboss--thumb {
        color: var(--#{$name}-disabled-emboss-thumb-color) !important;
      }

      .#{$name}-emboss--track {
        caret-color: var(--#{$name}-disabled-emboss-track-color) !important;
        color: var(--#{$name}-disabled-emboss-track-color) !important;

        &__checked {
          caret-color: var(
            --#{$name}-disabled-emboss-track-checked-color
          ) !important;
          color: var(--#{$name}-disabled-emboss-track-checked-color) !important;
        }
      }
    }

    // loading
    .is-loading {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      margin: auto;
      border-radius: 50%;
      border: 1px solid currentColor;
      border-color: transparent transparent transparent currentColor;
      animation: switch-loading 1s linear;
      animation-iteration-count: infinite;
      background-color: transparent;

      width: calc(getCssVar($name, 'emboss-default-height') - 4);
      height: calc(getCssVar($name, 'emboss-default-height') - 4);
    }

    // 小
    &.is-small {
      width: $emboss-small-width;
      height: $emboss-small-height;

      .#{$name}-emboss--loading {
        width: $emboss-small-height - 4;
        height: $emboss-small-height - 4;
      }

      .#{$name}-emboss--track {
        top: calc(50% - 4px);
        left: 1px;
        width: $emboss-small-width - 2;
        height: math.div($emboss-small-height, 2);
      }

      .#{$name}-emboss--thumb {
        width: $emboss-small-height;
        height: $emboss-small-height;

        &__checked {
          transform: translate(
            $emboss-small-height - (math.div($emboss-small-height, 4)),
            0
          );
        }
      }

      .#{$name}-emboss--ripple {
        top: calc(50% - 20px);
        left: -((math.div($emboss-small-height, 2)) +
              (math.div($emboss-small-height, 4)));
        width: $emboss-small-width - 2;
        height: $emboss-small-width - 2;

        &__checked {
          transform: translate(
            $emboss-small-height - (math.div($emboss-small-height, 4)),
            0
          );
        }
      }
    }

    // 大
    &.is-large {
      width: getCssVar($name, 'emboss-large-width');
      height: getCssVar($name, 'emboss-large-height');

      .is-loading {
        width: calc(getCssVar($name, 'emboss-large-height') - 4px);
        height: calc(getCssVar($name, 'emboss-large-height') - 4px);
      }

      @include e(track) {
        top: calc(50% - 7px);
        left: 3px;
        width: calc(getCssVar($name, 'emboss-large-width') - 10px);
        height: calc(math.div(getCssVar($name, 'emboss-large-height'), 2));
      }

      @include e(thumb) {
        width: getCssVar($name, 'emboss-large-height');
        height: getCssVar($name, 'emboss-large-height');

        &.is-checked {
          transform: translate(
            calc(
              getCssVar($name, 'emboss-large-height') - 9px +
                math.div(getCssVar($name, 'emboss-large-height'), 4)
            ),
            0
          );
        }
      }

      @include e(ripple) {
        top: calc(50% - 32px);
        left: -calc(
          (
              getCssVar($name, 'emboss-large-width') -
                getCssVar($name, 'emboss-large-height') -
                (math.div(getCssVar($name, 'emboss-large-height'), 4)) - 2
            ) + 4
        );

        width: calc(getCssVar($name, 'emboss-large-width') - 10px);
        height: calc(getCssVar($name, 'emboss-large-width') - 10px);

        &.is-checked {
          transform: translate(
            $emboss-large-height + (math.div($emboss-large-height, 4)) - 9,
            0
          );
        }
      }
    }
  }

  // ripple
  @include e(ripple) {
    position: absolute;
    top: calc(50% - 25px);
    left: -14px;
    width: calc(getCssVar($name, 'emboss-default-width') - 2);
    height: calc(getCssVar($name, 'emboss-default-width') - 2);
    margin: getCssVar($name, 'emboss-margin');
    border-radius: 50%;
    transition: all $transition-default;

    // 激活
    &.is-checked {
      transform: translate(
        calc(
          getCssVar($name, 'emboss-default-height') -
            (math.div(getCssVar($name, 'emboss-default-height'), 4))
        ),
        0
      );
    }
  }
}

@keyframes switch-loading {
  0% {
    transform: rotate(0);
  }

  100% {
    transform: rotate(360deg);
  }
}
